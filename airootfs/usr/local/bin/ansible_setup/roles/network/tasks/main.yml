---
# tasks file for network
- name: Ensure NetworkManager is installed (if chosen or default)
  ansible.builtin.package:
    name: networkmanager
    state: present
  # when: network_manager_choice == "NetworkManager" # Assuming a variable from install_vars.yml

- name: Enable NetworkManager service
  ansible.builtin.systemd:
    name: NetworkManager.service
    enabled: yes
    state: started
  # when: network_manager_choice == "NetworkManager"

- name: Ensure iwd is installed (if chosen)
  ansible.builtin.package:
    name: iwd
    state: present
  # when: network_manager_choice == "iwd"

- name: Enable iwd service
  ansible.builtin.systemd:
    name: iwd.service
    enabled: yes
    state: started
  # when: network_manager_choice == "iwd"

# Placeholder for more specific network configurations:
# - Copying existing network profiles (e.g., Wi-Fi passwords from live environment)
# - Setting up systemd-resolved or other DNS resolvers
# - Firewall configuration (e.g., ufw, firewalld)

- name: Ensure /etc/resolv.conf is a symlink to systemd-resolved (if applicable)
  ansible.builtin.file:
    src: /run/systemd/resolve/stub-resolv.conf
    dest: /etc/resolv.conf
    state: link
    force: yes
  when: "'systemd-resolved' in services_to_enable" # Example condition

- name: Ensure net.ifnames=0 is set for predictable network interface names (if not handled by bootloader)
  ansible.builtin.lineinfile:
    path: /etc/default/grub # This might be better in bootloader role or as a kernel cmdline option
    regexp: '^(GRUB_CMDLINE_LINUX="(?!.*net.ifnames=0).*)"$'
    line: 'GRUB_CMDLINE_LINUX="\1 net.ifnames=0"'
    backrefs: yes
  when: bootloader_choice == "grub" # Example, needs coordination
  notify: Update grub config # Handler in bootloader role
  tags:
    - skip_ansible_lint # Example if linter complains about path outside role

# Note: The original script copies network settings like /var/lib/iwd, /etc/resolv.conf,
# /etc/netctl/interfaces, /etc/NetworkManager/system-connections.
# This should be handled here if those settings are to be preserved from the live environment.
# For example:
# - name: Copy NetworkManager connections from live environment
#   ansible.builtin.copy:
#     src: /mnt/etc/NetworkManager/system-connections/ # Assuming installer copied them to /mnt first
#     dest: /etc/NetworkManager/system-connections/
#     remote_src: yes # Important as we are in chroot
#     mode: '0600'
#   when: network_manager_choice == "NetworkManager" and copied_nm_connections_exist_flag # Flag set by installer